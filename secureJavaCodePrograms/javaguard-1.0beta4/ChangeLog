1.0beta3 -> 1.0beta4
====================

Bugs fixed:
-----------
* Classes that are matched by a ".obfuscate" entry in the script file were
  not assigned obfuscated output names when their parent package/class are
  matched by a ".ignore" entry; however their contents were still obfuscated.

* Methods that are defined in an interface A but used inside function calls to
  methods of an interface B that extends A caused a NoSuchMethodException.

Improvements:
-------------
* JavaGuard can now obfuscate several Jar files at once.

* JavaGuard can now use and obfuscate files from local directories. So far
  there aren't any dependency checks so the user is responsible that no classes
  are missing.



1.0beta2 -> 1.0beta3
====================

Bugs fixed:
-----------
* Minor fix when calculating which packages and classes may be obfuscated to
  prevent a possible problem when classes are matched both by a ".obfuscate"
  and a ".ignore" entry in the script file.
  
Improvements:
-------------
* The manifest file parser was completely rewritten. It now changes the
  "Main-Class" entry when the main class is obfuscated and doesn't truncate
  long lines anymore.

* Support for classes that were compiled by javac with the "-target 1.2" (or
  higher) command line option which is the default setting on JDK 1.4.

* JavaGuard now has a command line option that allows it to dump the parsed
  class files before they are obfuscated (for debugging purposes).

* Slight speed improvements when building the class tree.



1.0beta1 -> 1.0beta2
====================

Bugs fixed:
-----------
* Method and field search expressions were processed incorrectly.

* Resource files for inner classes were assigned wrong output names. This
  caused an error when writing out the obfuscated Jar file when there were
  two or more such resource files.

* The special processing of classes generated by RMIC could cause classes
  listed in the logfile at the wrong place.

Improvements:
-------------
* The script file can now contain ".obfuscate" directives (similar to the
  ".ignore" lines). These directives allow the user to specify elements
  that must be obfuscated even when they are matched by other search
  patterns.

* The script file parser supports priorities. All entries are processed
  in the order they are listed in the file. The ".obfuscate" directives
  have the highest priority, followed by ".ignore" expressions.
  An element that is matched by a package, class, method or field entry
  will be ignored if it was matched by an earlier expression.

* The script file directives ".attribute rmic" and ".attribute resources"
  were renamed to ".rename rmic/resources".

* The script file directive ".attribute autocorrect" was renamed to
  ".preserve hardcodedreferences".
